@page "/OrdersAdmin"
@layout Layout.AdminLayot;

@rendermode InteractiveServer
@inject NavigationManager navigationManager
@using Microsoft.EntityFrameworkCore
@using MolotovSportWeb.Models

@inject MolotovSportWebContext DbContext
@inject Classes.Servers.UserStateService UserState

<div class="text-center">
    <div class="ScreenLogUser">
        <h2 class="textHeaderPage">Заказы</h2>
        <br />

        <div class="DisplayInline">


            <pre class="TextFilrtAdminProduct">Сортировка:</pre>
            <select @onchange="Sorting" class="ListViewFiltr">
                <option>Без сортировки</option>
                <option>Сначала старые заказы</option>
                <option>Сначала новые заказы</option>
                <option>Сначала не выполненные заказы</option>
                <option>Сначала выполненные заказа</option>
            </select>
        </div>
        <div>
            <table>
                <tr >
                    <td class="textOrderTD" >
                        <pre class="txtOrderArmin" >Пользователь</pre>
                    </td>
                    <td class="textOrderTD"  >
                        <pre class="txtOrderArmin">Дата заказа</pre>
                    </td>
                    <td class="BorderSettingNoRight">
                        <pre class="txtOrderArmin">Адрес</pre>
                    </td>
                    
                    <td>
                        <table>

                            <tr>
                                <td class="textOrderTD">
                                    <pre class="txtOrderArmin">Изображение</pre>
                                </td>

                                <td class="textOrderTD">
                                    <pre class="txtOrderArmin">Название</pre>
                                </td>

                                <td class="textOrderTD">
                                    <pre class="txtOrderArmin">Количество</pre>
                                </td>
                            </tr>
                        </table>
                    </td>

                    <td class="BorderSettingNoBottomLeft">
                        <pre class="txtOrderArmin">Общая сумма</pre>
                    </td>

                    <td class="textOrderTD">
                        <pre class="txtOrderArmin">Статус</pre>
                    </td>
                </tr>
                
                @foreach(var order in orders)
                {
                    <tr >
                        <td class="textOrderTD" style="vertical-align: top;">
                            <pre class="txtOrderArmin">@users.Where(p => p.UserId == order.UserId).Select(p => p.UserName).First()</pre>
                        </td>
                        <td class="textOrderTD" style="vertical-align: top;">
                            <pre class="txtOrderArmin">@order.OrderData</pre>
                        </td>
                        <td class="BorderSettingNoRight" style="vertical-align: top;">
                            <pre class="txtOrderArmin">@order.Adress</pre>
                        </td>

                        <td >
                            <table>

                                @foreach(var item in order.OrderItems)
                                {
                                    <tr>
                                        <td class="BorderSettingNoBottomTop">
                                            <img class="ProductImageAdminOrder" src="@products.Where( p => p.ProductId == item.ProductId).Select(p => p.ImageUrl).First()" />
                                        </td>

                                        <td class="BorderSettingNoBottomTop">
                                            <pre class="txtOrderArmin">@products.Where(p => p.ProductId == item.ProductId).Select(p => p.ProductName).First()</pre>
                                        </td>
                                        <td class="BorderSettingNoBottomTop">
                                            <pre class="txtOrderArmin">@item.Count</pre>
                                        </td>
                                    </tr>
                                }
                            </table>
                        </td>

                        <td class="BorderSettingNoBottomLeft" style="vertical-align: top;">
                            <pre class="txtOrderArmin">@Convert.ToInt32(order.TotalAmout) рублей</pre>
                        </td>

                        <td class="textOrderTD" style="vertical-align: top; padding: 5px">
                            <select class="ListViewFiltr"  style="background-color: @GetBackgroundColor(order.StatusOrder); color: white;"  @onchange="(e) => ChangeStatus(e, order)">
                                <option value="1">Выполнен</option>
                                <option value="0">В разработке</option>
                                <option value="-1">Отменен</option>
                            </select>

                        </td>
                    </tr>

                }

            </table>
        </div>

    </div>
</div>

@code {
    string error = "";

    Classes.DataBase.OrdersDataBase ordersDataBase = new Classes.DataBase.OrdersDataBase();
    List<Order> orders = new List<Order>();
    List<Product> products = new List<Product>();
    List<User> users = new List<User>();
    // Метод для определения цвета фона в зависимости от выбранного фрукта


    private string GetBackgroundColor(decimal status)
    {
        return status switch
        {
            1 => "#1AAD03", 
            0 => "#AEB000",  
            -1 => "#B4191C", 
            _ => "#E5E5E5"       
        };
    }
    protected override async Task OnInitializedAsync()
    {

        orders =  ordersDataBase.FillOrderList();
        products = ordersDataBase.FillProductList();
        users = ordersDataBase.FillUsersList();
        StateHasChanged();
        //orders.LoadingDataBaseAsync();
    }

    public void UpdateStatut(Order order)
    {
        order.StatusOrder = 1;
        using(var context = new MolotovSportWebContext())
        {
            context.Update(order);
            context.SaveChanges();
        }
    }

    public void ChangeStatus(ChangeEventArgs e, Order order)
    {
        // decimal id = Convert.ToDecimal(e.ToString);

        using (var context = new MolotovSportWebContext())
        {
            var oprOrder = context.Orders.Where(x => x.OrderId == order.OrderId).FirstOrDefault();
            oprOrder.StatusOrder = order.StatusOrder;
            context.SaveChanges();
        }

        orders = ordersDataBase.FillOrderList();
        StateHasChanged();
    }

    public void Sorting(ChangeEventArgs e)
    {
        string text = Convert.ToString(e.Value);

        switch (text)
        {
            case "Без сортировки":
                orders = ordersDataBase.FillOrderList();
                StateHasChanged();
                break;

            case "Сначала старые заказы":
                orders = ordersDataBase.FillOrderList();
                orders = orders.OrderBy(p => p.OrderData).ToList();
                StateHasChanged();
                break;

            case "Сначала новые заказы":
                orders = ordersDataBase.FillOrderList();
                orders = orders.OrderByDescending(p => p.OrderData).ToList();
                StateHasChanged();
                break;

            case "Сначала не выполненные заказы":
                orders = ordersDataBase.FillOrderList();
                orders = orders.OrderBy(p => p.StatusOrder).ToList();
                StateHasChanged();
                break;

            case "Сначала выполненные заказа":
                orders = ordersDataBase.FillOrderList();
                orders = orders.OrderByDescending(p => p.StatusOrder).ToList();
                StateHasChanged();
                break;
        }
    }



}
