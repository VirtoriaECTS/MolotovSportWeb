@page "/AddNewCategoryMini"
@layout Layout.AdminLayot;

@rendermode InteractiveServer
@inject NavigationManager navigationManager
@using Microsoft.EntityFrameworkCore
@using MolotovSportWeb.Models

@inject MolotovSportWebContext DbContext
@inject Classes.Servers.UserStateService UserState

<div class="text-center">
    <div class="ScreenLogUser">
        <h2 class="textHeaderPage">Редактирование списка подкатегория</h2>

        <h5 class="textScreenInput">Выберите категорию</h5>
        <br />
        <select @onchange="selectCategory" selected="@filrtAndSorted.Categoryies.Select( p => p.CategoryName).First()" class="StyleInputRegistation">
            @foreach (var item in filrtAndSorted.Categoryies)
            {
                <option value="@item.CategoryId"> @item.CategoryName</option>
            }
        </select>
        <br />
        <h5 class="textScreenInput">Название подкатегории</h5>
        <br />
        <div>
            <input class="StyleInputRegistation" @bind="nameMiniCategpries"/>
            <h5 style="color: red">@error</h5>
            <button @onclick="AddCategoryMini" class="AdminButtonAddProduct">Добавить</button>
        </div>

        <div class="PrintFirmForAdmin">
            <table class="tableFirmsAdmin">

                @foreach (var item in categoriesMinis)
                {
                    <tr class="table_center_by_css">
                        <td class="BorderTable">
                            <pre class="TextFirmForAdmin">@item.CategoryMiniName</pre>

                        </td>

                        <td @onclick="() => DeleteCategpryMini(item.CategoryMiniId)" class="BorderTable">
                            <button class="ButtonDeleteListView"></button>
                        </td>
                    </tr>
                }

            </table>
        </div>

    </div>
</div>

@code {
    string nameMiniCategpries = "";
    int idCategory = 0;
    string error = "";
    Classes.DataBase.FilrtAndSorted filrtAndSorted;
    List<CategoriesMini> categoriesMinis = new List<CategoriesMini>();
    Classes.DataBase.AddInfo addInfo = new Classes.DataBase.AddInfo();

    protected override async Task OnInitializedAsync()
    {

        filrtAndSorted = new Classes.DataBase.FilrtAndSorted(-1);
        idCategory = filrtAndSorted.Categoryies.Select(p => p.CategoryId).First();
        filrtAndSorted.LoadingDataBaseAsync();

        categoriesMinis = filrtAndSorted.ActualyCategoryMini().Where(x => x.CategoryId == idCategory).ToList();
    }

    public void selectCategory(ChangeEventArgs e)
    {


        idCategory = Convert.ToInt32(e.Value);
        categoriesMinis.Clear();
        categoriesMinis = filrtAndSorted.ActualyCategoryMini().Where(x => x.CategoryId == Convert.ToInt32(e.Value)).ToList();
        StateHasChanged();

    }



    public void AddCategoryMini()
    {
        if (nameMiniCategpries.Length == 0)
        {
            error = "Заполните поле";
        }
        else
        {
            error = "";
            addInfo.AddCategoryMini(idCategory, nameMiniCategpries);
            StateHasChanged();
        }

    }

    public void DeleteCategpryMini(int idCategoryMini)
    {
        addInfo.DeleteCategoryMin(idCategoryMini);
        StateHasChanged();

    }
}
