@page "/Statictic"
@layout Layout.AdminLayot;
@rendermode InteractiveServer
@inject Microsoft.JSInterop.IJSRuntime JS
@inject NavigationManager NavigationManager
@using System.IO;
@inject NavigationManager navigationManager
@using MudBlazor


<div class="text-center">
    <div class="ScreenLogUser">
        <h2 class="textHeaderPage">Статистика</h2>
        <br />
    </div>
</div>

<div>
    <div class="staticHeader">
        <table>
            <tr>
                <td>
                    <pre class="TextFilrtAdminProduct">Доход:</pre>
                </td>
            </tr>
            <tr>
                <td width="30%">
                    <MudStack AlignItems="AlignItems.Center"  Style="width:650px; height:450px">
                        <MudDateRangePicker  PickerVariant="@_variant" MaxDate="@_maxDate" DateRangeChanged="OnDateRangeChanged" Margin="Margin.Dense" />
                <MudSpacer />

            </MudStack>

                </td>

                <td>

                    <MudChart ChartType="ChartType.Line" ChartSeries="@SeriesSell" XAxisLabels="@XAxisLabelsMoney"  @bind-SelectedIndex="Index" Width="100%" Height="550px" ChartOptions="@OptionsSell" />
                    <MudGrid>


                    </MudGrid>
                </td>
            </tr>




            <tr>
                <td>
                    <pre class="TextFilrtAdminProduct">Продажи:</pre>
                </td>
            </tr>
            <tr>
                <td width="30%">
                    <MudStack AlignItems="AlignItems.Center" Style="width:650px; height:450px">
                        <MudDateRangePicker PickerVariant="@_variant" MaxDate="@_maxDate" DateRangeChanged="OnDateRangeChangedSellProduct" Margin="Margin.Dense" />
                        <MudSpacer />

                    </MudStack>

                </td>

                <td>

                    <MudChart ChartType="ChartType.Line" ChartSeries="@SeriesProduct" XAxisLabels="@XAxisLabelsCount" @bind-SelectedIndex="Index" Width="100%" Height="550px" ChartOptions="@OptionsProduct" />
                    <MudGrid>
                    </MudGrid>
                </td>
            </tr>



            <tr>
                <td>
                    <pre class="TextFilrtAdminProduct">Статистика продаж брендов:</pre>
                </td>
            </tr>
            <tr>
                <td width="30%">
                    <pre class="TextFilrtStatustic">@popularBrendText</pre>

                </td>

                <td>

                    <MudChart ChartType="ChartType.Donut" class="TextFilrtStatustic" Width="100%" Height="550px" InputData="@countSellProduct" LegendPosition="@LegendPosition" InputLabels="@nameFirm">
                        <CustomGraphics>

                        </CustomGraphics>
                    </MudChart>
                </td>
            </tr>



            <tr>
                <td>
                    <pre class="TextFilrtAdminProduct">Топ 10 продаваемых товаров:</pre>
                </td>
            </tr>
            <tr>
                <td width="30%">

                    <pre class="TextFilrtStatustic">@popularProductsText</pre>
                </td>

                <td>

                    <MudChart ChartType="ChartType.Donut" class="TextFilrtStatustic" Width="100%" Height="550px" InputData="@countSellOneProduct" LegendPosition="@LegendPosition" InputLabels="@nameProduct">
                        <CustomGraphics>

                        </CustomGraphics>
                    </MudChart>

                </td>
            </tr>
        </table>
        


     

        <br />



    </div>





</div>

@code {
    double[] countSellProduct;
    double[] countSellOneProduct;
    string[] nameFirm;
    string[] nameProduct;

    string popularBrendText = "";
    string popularProductsText = "";

    private DateTime _maxDate = DateTime.Now.Date;

    private PickerVariant _variant = PickerVariant.Static;
    private DateRange _dateRange { get; set; }
    private DateRange _dateRangeProduct { get; set; }
    public string[] XAxisLabelsMoney;
    public string[] XAxisLabelsCount;

    int sortdSell = -1;

    int sortdProduct = -1;



    private void OnDateRangeChanged(DateRange dateRange)
    {
        _dateRange = dateRange; // Обновляем диапазон
        Console.WriteLine($"Диапазон дат изменён: {_dateRange.Start?.ToShortDateString()} - {_dateRange.End?.ToShortDateString()}");

        changeValueMoney();
    }

    private void OnDateRangeChangedSellProduct(DateRange dateRange)
    {
        _dateRangeProduct = dateRange; // Обновляем диапазон
        Console.WriteLine($"Диапазон дат изменён: {_dateRangeProduct.Start?.ToShortDateString()} - {_dateRangeProduct.End?.ToShortDateString()}");
        changeValueProduct();


    }



    public void changeValueMoney()
    {
        SeriesSell.Clear();
        DateTime date1 = Convert.ToDateTime(_dateRange.Start); // год - месяц - день
        DateTime date2 = Convert.ToDateTime(_dateRange.End); // год - месяц - день

        List<double> money = statistic.priceMonth(date1, date2);

        SeriesSell.Add(new ChartSeries()
            {
                Name = "Доход",
                Data = money.ToArray()
            });

        XAxisLabelsMoney = statistic.legenMoneyDate(date1, date2).ToArray();
        StateHasChanged();
    }


    public void changeValueProduct()
    {
        SeriesProduct.Clear();
        DateTime date1 = Convert.ToDateTime(_dateRangeProduct.Start); // год - месяц - день
        DateTime date2 = Convert.ToDateTime(_dateRangeProduct.End); // год - месяц - день

        List<double> productCount = statistic.countMonth(date1, date2);


        SeriesProduct.Add(new ChartSeries()
            {
                Name = "Продажи",
                Data = productCount.ToArray()
            });
        XAxisLabelsCount = statistic.legenMoneyDate(date1, date2).ToArray();
        StateHasChanged();
    }







    public Position LegendPosition { get; set; } = Position.Right;


    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    public ChartOptions OptionsSell = new ChartOptions();

    public ChartOptions OptionsProduct = new ChartOptions()
        {
            ChartPalette = new string[]
            {
            "#00FF00"  // Зелёный для Renewable
            }
        };

    Classes.Statistic.Statistic statistic;

    List<ChartSeries> SeriesSell = new List<ChartSeries>();
    List<ChartSeries> SeriesProduct = new List<ChartSeries>();

    protected override void OnParametersSet()
    {
        statistic = new Classes.Statistic.Statistic();


        List<double> money = statistic.priceYear();


        List<double> productCount = statistic.countYear();
        SeriesSell.Add(new ChartSeries()
            {
                Name = "Доход",
                Data = money.ToArray()
            });

        XAxisLabelsMoney = statistic.legenMoneyAllTime().ToArray();
        XAxisLabelsCount = statistic.legenMoneyAllTime().ToArray();


        SeriesProduct.Add(new ChartSeries()
            {
                Name = "Продажи",
                Data = productCount.ToArray()
            });

        Dictionary<string, int> populatBrends = statistic.popularBrend();


        List<double> countSellBrend = new List<double>();
        List<string> nameBrend = new List<string>();

        int i = 1;


        foreach(var item in populatBrends)
        {
            countSellBrend.Add(item.Value);
            nameBrend.Add(item.Key);

            popularBrendText += i + ". " + item.Key + " - " + item.Value + " проданных товаров\n";
            i++;
        }

        countSellProduct =  countSellBrend.ToArray() ;
        nameFirm = nameBrend.ToArray();

        Dictionary<string, int> populatProduct = statistic.popularProduct();
        List<double> countSellProductOne = new List<double>();
        List<string> namePeoduct = new List<string>();

        i = 1;


        foreach (var item in populatProduct)
        {
            countSellProductOne.Add(item.Value);
            namePeoduct.Add(item.Key);

            popularProductsText += i + ". " + item.Key + " - " + item.Value + " проданных товаров\n";
            i++;
        }

        countSellOneProduct = countSellProductOne.ToArray();
        nameProduct = namePeoduct.ToArray();



        StateHasChanged();

    }



}

