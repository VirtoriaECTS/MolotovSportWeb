@page "/ProductAdmin"
@rendermode InteractiveServer
@inject NavigationManager navigationManager
@using Microsoft.EntityFrameworkCore
@using MolotovSportWeb.Models
@layout Layout.AdminLayot;
@inject MolotovSportWebContext DbContext
@inject NavigationManager navigationManager

<div class="ScreenLogUser">
    <div class="text-center">
        <h2 class="textHeaderPage">Товары</h2>
    </div>

</div>

<div class="DisplayInline">
    <button @onclick="onClickNewProduct" class="ButtonAddNewProductAdmin">Добавить товар</button>

    <pre class="TextFilrtAdminProduct">Сортировка:</pre>
    <select  class="ListViewFiltr">
        <option>Без сортировки</option>
        <option>По возрастанию цены</option>
        <option>По убыванию цены</option>

    </select>

    <pre class="TextFilrtAdminProduct">Пол:</pre>

    <select class="ListViewFiltr">
        <option>Без фильтрации</option>
        @foreach (var gender in Products.GenderList)
        {
            <option>
                @gender.GenderName
            </option>
        }
    </select>

    <pre class="TextFilrtAdminProduct">Подкатегория:</pre>

    <select class="ListViewFiltr">
        <option>Без фильтрации</option>
        @foreach (var categoryiesMini in Products.CategoryiesMini)
        {
            <option>
                @categoryiesMini.CategoryMiniName
            </option>
        }
    </select>


    <pre class="TextFilrtAdminProduct">Фирмы:</pre>

    <select class="ListViewFiltr">
        <option>Без фильтрации</option>
        @foreach (var firms in Products.FirmList)
        {
            <option>
                @firms.FirmName
            </option>
        }
    </select>

    
</div>




<table class="ReadactProduct">





    <tr>
        

        <td class="imageTD">
            <pre class="textAdminNameProduct">Изображение</pre>
        </td>

        <td class="textTD">
            <pre class="textAdminNameProduct">Название</pre>
        </td>

        <td class="tableReadctProduct">
            <pre class="textAdminNameProduct">Фирма</pre>
        </td>

        <td class="tableReadctProduct">
            <pre class="textAdminNameProduct">Категория</pre>
        </td>

        <td class="tableReadctProduct">
            <pre class="textAdminNameProduct">Подкатегория</pre>
        </td>

        <td class="tableReadctProduct">
            <pre class="textAdminNameProduct">Гендер</pre>
        </td>

        <td class="tableReadctProduct">
            <pre class="textAdminNameProduct">Цена</pre>
        </td>

        <td class="ButtonTD">
            
        </td>


    </tr>

    

    @foreach (var product in Products.Products)
    {

        <tr>
            <td class="imageTD">

                <img class="ProductImageAdmin" src="@product.ImageUrl"/>
            </td>

            <td class="textTD">
                <pre class="textAdminNameProduct">@product.ProductName</pre>
            </td>

            <td class="tableReadctProduct">
                <pre class="textAdminNameProduct">@product.Firm.FirmName</pre>
            </td>

            <td class="tableReadctProduct">
                <pre class="textAdminNameProduct">@product.CategoriesMini.Category.CategoryName</pre>
            </td>

            <td class="tableReadctProduct">
                <pre class="textAdminNameProduct">@product.CategoriesMini.CategoryMiniName</pre>
            </td>

            <td class="tableReadctProduct">
                <pre class="textAdminNameProduct">@product.Gender.GenderName</pre>
            </td>

            <td class="tableReadctProduct">
                <pre class="textAdminNameProduct">@product.Price</pre>
            </td>

            <td class="ButtonTD">
                <div style="text-align:center">
                    <button class="buttonChangeAndDeleteProduct">Изменить</button>
                    <br />
                    <button class="buttonChangeAndDeleteProduct">Удалить</button>
                </div>

            </td>



        </tr>

    }

    



</table>

@code {
    Classes.DataBase.FilrtAndSorted Products;

    protected override async Task OnInitializedAsync()
    {

        Products = new Classes.DataBase.FilrtAndSorted(-1);
        Products.LoadingDataBaseAsync();
    }

    public void onClickNewProduct(){
        navigationManager.NavigateTo("AddNewProduct");

    }
}
