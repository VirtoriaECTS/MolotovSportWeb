@page "/ProductAdmin"
@rendermode InteractiveServer
@inject NavigationManager navigationManager
@using Microsoft.EntityFrameworkCore
@using MolotovSportWeb.Models
@layout Layout.AdminLayot;
@inject MolotovSportWebContext DbContext
@inject NavigationManager navigationManager

<div class="ScreenLogUser">
    <div class="text-center">
        <h2 class="textHeaderPage">Товары</h2>
    </div>

</div>

<div class="DisplayInline">
    <button @onclick="onClickNewProduct" class="ButtonAddNewProductAdmin">Добавить товар</button>

    <pre class="TextFilrtAdminProduct">Сортировка:</pre>
    <select @onchange="Sort" class="ListViewFiltr">
        <option value="-1">Без сортировки</option>
        <option value="0">По возрастанию цены</option>
        <option value="1">По убыванию цены</option>

    </select>

    <pre class="TextFilrtAdminProduct">Пол:</pre>

    <select @onchange="GenderSorting" class="ListViewFiltr">
        <option value="-1">Без фильтрации</option>
        @foreach (var gender in Products.GenderList)
        {
            <option value="@gender.GenderId">
                @gender.GenderName
            </option>
        }
    </select>

    <pre class="TextFilrtAdminProduct">Подкатегория:</pre>

    <select @onchange="CategoryMiniSorting" class="ListViewFiltr">
        <option value="-1">Без фильтрации</option>
        @foreach (var categoryiesMini in Products.CategoryiesMini)
        {
            <option value="@categoryiesMini.CategoryMiniId">
                @categoryiesMini.CategoryMiniName
            </option>
        }
    </select>


    <pre class="TextFilrtAdminProduct">Фирмы:</pre>

    <select @onchange="FirmsSorting" class="ListViewFiltr">
        <option value="-1">Без фильтрации</option>
        @foreach (var firms in Products.FirmList)
        {
            <option value="@firms.FirmId">
                @firms.FirmName
            </option>
        }
    </select>

    
</div>




<table class="ReadactProduct">





    <tr>
        

        <td class="imageTD">
            <pre class="textAdminNameProduct">Изображение</pre>
        </td>

        <td class="textTD">
            <pre class="textAdminNameProduct">Название</pre>
        </td>

        <td class="tableReadctProduct">
            <pre class="textAdminNameProduct">Фирма</pre>
        </td>

        <td class="tableReadctProduct">
            <pre class="textAdminNameProduct">Категория</pre>
        </td>

        <td class="tableReadctProduct">
            <pre class="textAdminNameProduct">Подкатегория</pre>
        </td>

        <td class="tableReadctProduct">
            <pre class="textAdminNameProduct">Гендер</pre>
        </td>

        <td class="tableReadctProduct">
            <pre class="textAdminNameProduct">Цена</pre>
        </td>

        <td class="ButtonTD">
            
        </td>


    </tr>

    

    @foreach (var product in products)
    {

        <tr>
            <td class="imageTD">

                <img class="ProductImageAdmin" src="@product.ImageUrl"/>
            </td>

            <td class="textTD">
                <pre class="textAdminNameProduct">@product.ProductName</pre>
            </td>

            <td class="tableReadctProduct">
                <pre class="textAdminNameProduct">@product.Firm.FirmName</pre>
            </td>

            <td class="tableReadctProduct">
                <pre class="textAdminNameProduct">@product.CategoriesMini.Category.CategoryName</pre>
            </td>

            <td class="tableReadctProduct">
                <pre class="textAdminNameProduct">@product.CategoriesMini.CategoryMiniName</pre>
            </td>

            <td class="tableReadctProduct">
                <pre class="textAdminNameProduct">@product.Gender.GenderName</pre>
            </td>

            <td class="tableReadctProduct">
                <pre class="textAdminNameProduct">@product.Price</pre>
            </td>

            <td class="ButtonTD">
                <div style="text-align:center">
                    <button @onclick="() => onClickChangeProduct(product.ProductId)" class="buttonChangeAndDeleteProduct">Изменить</button>
                    <br />
                    <button @onclick="() => Delete(product)" class="buttonChangeAndDeleteProduct">Удалить</button>
                </div>

            </td>



        </tr>

    }

    



</table>

@code {

    Classes.DataBase.FilrtAndSorted Products;

    int sortd = -1;
    int gender = -1;
    int categoryMini = -1;
    int firms = -1;

    List<Product> products = new List<Product>();

    protected override async Task OnInitializedAsync()
    {

        Products = new Classes.DataBase.FilrtAndSorted(-1);
        products = Products.Products;
        Products.LoadingDataBaseAsync();
    }

    public void Delete(Product product)
    {
        using(var context = new MolotovSportWebContext())
        {
            foreach(var size in product.ProductSizes)
            {
                size.Count = -1;
                context.Update(size);
                context.SaveChanges();
            }
            context.SaveChanges();
        }
        StateHasChanged();
        SortingAll();
    }

    public void onClickNewProduct(){
        navigationManager.NavigateTo("AddNewProduct");

    }

    public void onClickChangeProduct(int id)
    {
        navigationManager.NavigateTo($"/AddChangeProduct/{id}");
    }

    public void Sort(ChangeEventArgs e)
    {
        sortd = Convert.ToInt32(e.Value);
        SortingAll();
    }

    public void GenderSorting(ChangeEventArgs e)
    {
        gender = Convert.ToInt32(e.Value);
        SortingAll();
    }

    public void FirmsSorting(ChangeEventArgs e)
    {
        firms = Convert.ToInt32(e.Value);
        SortingAll();
    }

    public void CategoryMiniSorting(ChangeEventArgs e)
    {
        categoryMini = Convert.ToInt32(e.Value);
        SortingAll();
    }

    public void SortingAll()
    {
        products = Products.Products;


        if(gender != -1)
        {
            products = products.Where(p => p.GenderId == gender).ToList();
        }

        if(categoryMini != -1)
        {
            products = products.Where(p => p.CategoryIdMini == categoryMini).ToList();
        }

        if(firms != -1)
        {
            products = products.Where(p => p.FirmId == firms).ToList();
        }

        if (sortd != -1)
        {
            switch (sortd)
            {
                case 0:
                    products = products.OrderByDescending(p => p.Price).ToList();
                    break;

                case 1:
                    products = products.OrderBy(p => p.Price).ToList();
                    break;

            }

        }

          StateHasChanged();
    }
}
